#!/usr/bin/env bash
# @BP010: Release metadata
# @package: git-popper
# @build_type: bin
# @build_with: Mush 0.2.0 (2025-02-01 develop)
# @build_date: 2025-03-20T09:18:54Z
set -e
use() { return 0; }
extern() { return 0; }
legacy() { return 0; }
module() { return 0; }
public() { return 0; }
embed() { return 0; }
## BP004: Compile the entrypoint

module init
module sync

usage() {
  echo "Usage: git popper [COMMAND] [OPTIONS]"
  echo ""
  echo "Available options"
  echo "  -V, --version  Print version info and exit"
  echo "  -h, --help     Print help information"
  echo ""
  echo "Available commands"
  echo "  init    Init the '.gitpopper' file"
  echo "  sync    Synchronize local and remote data"
}

main() {
  local list

    while [ $# -gt 0 ]; do
      case "$1" in
        -*)
          case "$1" in
            --list)
              list=true
              ;;
            -o|--output)
              echo "Handling $1 with value: $2"
              shift
              ;;
            -h|--help)
              usage
              exit 1
              ;;
            *)
              echo "Unknown option: $1" >&2
              exit 1
              ;;
        esac
          ;;
        *)
          break
          ;;
      esac
      shift
    done || true

    gitpopper_file="$PWD/.gitpopper"

    case "$1" in
      init)
        gitpopper_init "${gitpopper_file}"
        ;;
      help)
        usage
        exit 1
        ;;
    esac

    if [ ! -f "${gitpopper_file}" ]; then
      echo "No .gitpopper file found in the current directory"
      exit 1
    fi

    if [ "$#" -eq 0 ]; then
      echo "No arguments supplied"
      exit 1
    fi

    case "$1" in
      sync)
        gitpopper_init "${gitpopper_file}"
        gitpopper_sync "${gitpopper_file}"
        ;;
    esac
}
gitpopper_init() {
  local gitpopper_file
  local repository
  local repository_id
  local repository_cache
  local workdir

  gitpopper_file="$1"
  repository_cache="$HOME/.git-popper/cache"

  mkdir -p "${repository_cache}"

  if [ ! -f "${gitpopper_file}" ]; then
    read -r -p "Enter repository url: " repository
    repository_id=$(echo "${repository}" | tr -s '/:.' '-')
    if [ ! -d "${repository_cache}/${repository_id}" ]; then
      git clone "${repository}" "${repository_cache}/${repository_id}"
    fi
    read -r -p "Enter working directory: " workdir && true
    workdir_cache="${repository_cache}/${repository_id}/${workdir}"
    mkdir -p "${workdir_cache}"
    if [ ! -f "${workdir_cache}/.gitpopper" ]; then
      echo "FROM ${repository}" > "${workdir_cache}/.gitpopper"
      if [ -n "${workdir}" ]; then
        echo "WORKDIR ${workdir}" >> "${workdir_cache}/.gitpopper"
      fi
    fi
    cp -f "${workdir_cache}/.gitpopper" "${gitpopper_file}"
  fi

  echo "Initializing gitpopper"

  while IFS= read -r line || [[ -n "${line}" ]]; do
    ((row=row+1))
    [[ -z "${line}" ]] && continue
    [[ "${line::1}" == "#" ]] && continue
    instruction=$(echo "${line}" | cut -d" " -f1)
    case "${instruction}" in
        FROM)
          repository=$(echo "${line}" | cut -d" " -f2)
          repository_id=$(echo "${repository}" | tr -s '/:.' '-')
          if [ ! -d "${repository_cache}/${repository_id}" ]; then
            git clone "${repository}" "${repository_cache}/${repository_id}"
          fi
          ;;
      esac
  done < "${gitpopper_file}"
}

gitpopper_sync() {
  local gitpopper_file
  local repository
  local repository_id
  local repository_cache
  local workdir
  local temp_pwd
  local file

  gitpopper_file="$1"
  repository_cache=
  workdir=.

  echo "Synchronize gitpopper"

  while IFS= read -r line || [[ -n "${line}" ]]; do
    ((row=row+1))
    [[ -z "${line}" ]] && continue
    [[ "${line::1}" == "#" ]] && continue
    #echo ${line}
    instruction=$(echo "${line}" | cut -d" " -f1)
    case "${instruction}" in
        FROM)
          repository=$(echo "${line}" | cut -d" " -f2)
          repository_id=$(echo "${repository}" | tr -s '/:.' '-')
          repository_cache="$HOME/.git-popper/cache/${repository_id}"
          repository_workdir="${repository_cache}"
          temp_pwd=$(pwd)
          cd "${repository_cache}" || exit 1
          git pull
          cd "${temp_pwd}" || exit 1
          ;;
        WORKDIR)
          workdir=$(echo "${line}" | cut -d" " -f2)
          repository_workdir="${repository_cache}/${workdir}"
          mkdir -p "${repository_workdir}"
          ;;
        ADD)
          echo "${line}"
          file=$(echo "${line}" | cut -d" " -f2)
          cp -f "${file}" "${repository_workdir}/${file}"
          ;;
      esac
  done < "${gitpopper_file}"

  cp -f "${gitpopper_file}" "${repository_workdir}/.gitpopper"

  temp_pwd=$(pwd)
  cd "${repository_cache}" || exit 1
  git add .
  git commit -am "Synchronization" || true
  git push
  cd "${temp_pwd}" || exit 1

  echo "Synchronization completed"
}
## BP005: Execute the entrypoint
main "$@"
